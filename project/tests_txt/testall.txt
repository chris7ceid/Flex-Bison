// Comments Test
/* Comments Test */
char rafael();

char rafael()
{
	return;	
}
// Comments Test 
/* Comments Test */
int rafael;

int int_var;
bool bool_var;
char char_var;
double double_var;

int* int_ptr;
bool* bool_ptr;
char* char_ptr;
double* double_ptr;

int int_arr[8];
bool bool_arr[8];
char char_arr[8];
double double_arr[8];

int* int_ptr_arr[8];
bool* bool_ptr_arr[8];
char* char_ptr_arr[8];
double* double_ptr_arr[8];

int multible, int_variable, declaration;
bool multible, bool_variable, declaration;
char multible, char_variable, declaration;
double multible, double_variable, declaration;

int* multible, int_ptr_variable, declaration;
bool* multible, bool_ptr_variable, declaration;
char* multible, char_ptr_variable, declaration;
double* multible, double_ptr_variable, declaration;

int intFunc();
bool boolFunc();
char charFunc();
double doubleFunc();
void voidFunc();

int* intPtrFunc();
bool* boolPtrFunc();
char* charPtrFunc();
double* doublePtrFunc();

int intFunc(int int_var);
int intFuncP(int* int_ptr);
bool boolFunc(bool bool_var);
bool boolFuncP(bool* bool_ptr);
double intFunc(int int_var);
double intFuncP(double* double_ptr);
int intFunc(int int_val);
int intFuncP(int* int_ptr);
void intFunc(int* int_ptr);

int intFunc(byref int int_var);
int intFuncP(byref int* int_ptr);
bool boolFunc(byref bool bool_var);
bool boolFuncP(byref bool* bool_ptr);
double intFunc(byref int int_var);
double intFuncP(byref double* double_ptr);
int intFunc(byref int int_val);
int intFuncP(byref int* int_ptr);
void intFunc(byref int* int_ptr);

int* intFunc(int int_var);
int* intFuncP(int* int_ptr);
bool* boolFunc(bool bool_var);
bool* boolFuncP(bool* bool_ptr);
double* intFunc(int int_var);
double* intFuncP(double* double_ptr);
int* intFunc(int int_val);
int* intFuncP(int* int_ptr);

int* intFunc(byref int int_var);
int* intFuncP(byref int* int_ptr);
bool* boolFunc(byref bool bool_var);
bool* boolFuncP(byref bool* bool_ptr);
double* intFunc(byref int int_var);
double* intFuncP(byref double* double_ptr);
int* intFunc(byref int int_val);
int* intFuncP(byref int* int_ptr);

int intFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
bool boolFunc(byref int* int_ptr, 
	byref int int_var, 
	byref bool flag,
	byref bool* flag, 
	byref char char_var, 
	byref char* char_ptr, 
	byref double double_var, 
	byref double* double_ptr);
char charFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
double doubleFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
void voidFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);

int* intPtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
bool* boolPtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
char* charPtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
double* doublePtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);

int int_var;
bool bool_var;
char char_var;
double double_var;


int intFunc();
bool boolFunc();
char charFunc();
double doubleFunc();


void funcWithDefinitions()
{
	int int_val;
	int* int_ptr;
}

int intFunc()
{
	int int_val;
	int* int_ptr;
	return 1;
}
void funcWithDefinitions();
void funcWithDefinitions2();
bool funcWithReturn(int sss);
int funcWithIf(int sss);
bool funcWithFor(int sss);
bool funcWithFor2(int sss);
bool funcWithStatements(int sss);
bool funcWithForAndId(int sss);

void funcWithDefinitions()
{
	int int_val;
	int* int_ptr;
	return;
}

void funcWithDefinitions2()
{
	int int_val;
	int* int_ptr;
	return;
}

bool funcWithReturn(int sss)
{
	return true;
}

int funcWithIf(int sss)
{
	int rafael;
	true;
	if(true)
	{
		;
		;
	}
	
	if(false)
		;
	else
		;
		
	if(true)
	{
		;
		;
	}
	else
	{
		;
		;
	}
	return 1;
}

bool funcWithFor(int sss)
{
	for(true; true; true)
		;
	return true;
}

bool funcWithFor2(int sss)
{
	for(;;)
	{
		;
		break;
	}
	
	for(true; true; true)
	{
		;
		continue rafael;
	}
	
	for(; ; );
	for(true; ; );
	for(true; true; );
	for(true; true; true);
	for(; true; true);
	for(; ; true);
	for(; true; );
	return true;
}

bool funcWithForAndId(int sss)
{
	rafael: for(;;);
	
	for(; ; );

	return true;
}

bool funcWithStatements(int sss)
{
	;
	true;
	false;
	return false;
	return true;
	return;
	break rafael;
	break;
	continue rafael;
	continue;
	if(true);
	for(;;);
	return true;
}


bool funcWithExpretions(int sss);
int rafael(bool b);
int func();

int rafael;
int i,j,a,b,c,d,e;
int array[20];
int index;
int *ptr;
int address;
bool flag;

bool funcWithExpretions(int sss)
{
	rafael(true);
	true;
	false;
	null;
	234;
	rafael;
	123.2;
	func();
	func(a, b, c, 1, 'a');
	array[index];
	*ptr;
	&address;
	+a;
	-a;
	!flag;
	5*5;
	5/5;
	5%5;
	5.5+5.5;
	5-5;
	5<5;
	5>5;
	5<=5;
	5>=5;
	5==5;
	5!=5;
	5&&5;
	5||5;
	a,a;
	++i;
	--i;
	i++;
	i--;
	i+j;
	(double)i;
	i=4;
	i+=5;
	i-=5;
	i*=5;
	i%=5;
	i/=5;
	(true) ? i=1 : i=0;
	new int;
	new int[index];
	delete i;
	a,b,c,e;
	return true;
}
bool funcWithFor(int sss);
bool funcWithFor2(int sss);
bool funcWithForAndId(int sss);

bool funcWithFor(int sss)
{
	for(true; true; true)
		;
	return true;
}

bool funcWithFor2(int sss)
{
	for(;;)
	{
		;
		break;
	}
	
	for(true; true; true)
	{
		;
		continue rafael;
	}
	
	for(; ; );
	for(true; ; );
	for(true; true; );
	for(true; true; true);
	for(; true; true);
	for(; ; true);
	for(; true; );
	return true;
}

bool funcWithForAndId(int sss)
{
	rafael: for(;;);
	
	for(; ; );
	return true;
}
void funcWithDefinitions1();
void funcWithDefinitions2();
bool funcWithReturn(int sss);

void funcWithDefinitions1()
{
	int int_val;
	int* int_ptr;
	return;
}

void funcWithDefinitions2()
{
	int int_val;
	int* int_ptr;
	return;
}

bool funcWithReturn(int sss)
{
	return true;
}
int intFunc();
bool boolFunc();
char charFunc();
double doubleFunc();
void voidFunc();

int* intPtrFunc();
bool* boolPtrFunc();
char* charPtrFunc();
double* doublePtrFunc();
int intFunc(int int_var);
int intFuncP(int* int_ptr);
bool boolFunc(bool bool_var);
bool boolFuncP(bool* bool_ptr);
double intFunc(int int_var);
double intFuncP(double* double_ptr);
int intFunc(int int_val);
int intFuncP(int* int_ptr);
void intFunc(int* int_ptr);

int intFunc(byref int int_var);
int intFuncP(byref int* int_ptr);
bool boolFunc(byref bool bool_var);
bool boolFuncP(byref bool* bool_ptr);
double intFunc(byref int int_var);
double intFuncP(byref double* double_ptr);
int intFunc(byref int int_val);
int intFuncP(byref int* int_ptr);
void intFunc(byref int* int_ptr);

int* intFunc(int int_var);
int* intFuncP(int* int_ptr);
bool* boolFunc(bool bool_var);
bool* boolFuncP(bool* bool_ptr);
double* intFunc(int int_var);
double* intFuncP(double* double_ptr);
int* intFunc(int int_val);
int* intFuncP(int* int_ptr);

int* intFunc(byref int int_var);
int* intFuncP(byref int* int_ptr);
bool* boolFunc(byref bool bool_var);
bool* boolFuncP(byref bool* bool_ptr);
double* intFunc(byref int int_var);
double* intFuncP(byref double* double_ptr);
int* intFunc(byref int int_val);
int* intFuncP(byref int* int_ptr);

	
int intFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
bool boolFunc(byref int* int_ptr, 
	byref int int_var, 
	byref bool flag,
	byref bool* flag, 
	byref char char_var, 
	byref char* char_ptr, 
	byref double double_var, 
	byref double* double_ptr);
char charFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
double doubleFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
void voidFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);

int* intPtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
bool* boolPtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
char* charPtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);
double* doublePtrFunc(int* int_ptr, 
	int int_var, 
	bool flag, 
	bool* flag, 
	char char_var, 
	char* char_ptr, 
	double double_var, 
	double* double_ptr);

int funcWithIf(int sss);
int funcWithIf(int sss)
{
	int rafael;
bool a;
	a= true;
	rafael;

	return 1;
}
bool funcWithStatements(int sss);
bool funcWithStatements(int sss)
{
	
	true;
	false;
	
	break rafael;
	break;
	continue rafael;
	continue;
	if(true);
	rafael:for(;;);
	return false;
}


int int_var;
bool bool_var;
char char_var;
double double_var;

int* int_ptr;
bool* bool_ptr;
char* char_ptr;
double* double_ptr;

int int_arr[8];
bool bool_arr[8];
char char_arr[8];
double double_arr[8];

int* int_ptr_arr[8];
bool* bool_ptr_arr[8];
char* char_ptr_arr[8];
double* double_ptr_arr[8];

int multible, int_variable, declaration;
bool multible, bool_variable, declaration;
char multible, char_variable, declaration;
double multible, double_variable, declaration;

int* multible, int_ptr_variable, declaration;
bool* multible, bool_ptr_variable, declaration;
char* multible, char_ptr_variable, declaration;
double* multible, double_ptr_variable, declaration;
